import{dedent as S}from"@mdit/helper";const v=(u,{name:a,open:m,close:b,render:h}={name:"uml",open:"start",close:"end",render:(o,i)=>{const f=o[i],{content:e,info:r,type:p}=f;return`<div class="${p}" title="${r}">${e}</div>`}})=>{const o=`@${m}`,i=`@${b}`,f=(e,r,p,$)=>{let n=e.bMarks[r]+e.tShift[r],l=e.eMarks[r];if(e.src.charAt(n)!=="@")return!1;let t;for(t=0;t<o.length;++t)if(o[t]!==e.src[n+t])return!1;const g=e.src.slice(n,n+t),M=e.src.slice(n+t,l);if($)return!0;let k=!1,s=r;for(;s<p&&(n=e.bMarks[s]+e.tShift[s],l=e.eMarks[s],!(n<l&&e.sCount[s]<e.blkIndent));){if(e.src.charAt(n)==="@"&&e.sCount[s]<=e.sCount[r]){let d=!0;for(t=0;t<i.length;++t)if(i[t]!==e.src[n+t]){d=!1;break}if(d&&e.skipSpaces(n+t)>=l){k=!0;break}}s++}const C=e.src.split(`
`).slice(r+1,s).join(`
`),c=e.push(a,"uml",0);return c.block=!0,c.info=M,c.content=S(C),c.map=[r,s],c.markup=g,e.line=s+(k?1:0),!0};u.block.ruler.before("fence",a,f,{alt:["paragraph","reference","blockquote","list"]}),u.renderer.rules[a]=h};export{v as uml};
//# sourceMappingURL=index.js.map
